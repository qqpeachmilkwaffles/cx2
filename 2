def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    if arg1 < arg2:
        var12 = class3()
    else:
        var12 = class5()
    for var13 in xrange(22):
        var12.func4(arg2, var13)
    var17 = func7(var7, arg1)
    var22 = func9(var17, arg2)
    var29 = var25(var7, arg2)
    var30 = arg1 + ((var7 - 1922899246) | var17 + ((arg2 & var17) - var29) + (((var7 - (((var22 ^ var29 ^ arg2) ^ (arg2 ^ (var17 | ((var22 ^ var22) - arg1)))) - var17 ^ 998621105)) | arg1) + var29) ^ var22 ^ var17)
    var31 = (var7 & var22) & (var22 ^ (var7 | var29 ^ -17151561 & (arg1 & (var29 - (arg1 | (2001604116 ^ arg1 + var30 - var29 + arg1 - (arg2 + 1511420401) ^ 747 + arg2)) + var29 | var29 - var29)) & var29))
    var32 = (var31 & var30) & 377 | arg1
    result = var31 - arg1 - var7 | var31 ^ -90
    return result
def func12(arg26, arg27):
    var28 = arg27 & arg26
    result = -1760170054 - (arg26 & arg27 | (var28 + -87)) & arg27 - (-452 - arg26 | ((arg27 & arg27 | 1449708791) + arg26))
    return result
def func11():
    closure = [7]
    def func10(arg23, arg24):
        closure[0] += func12(arg23, arg24)
        return closure[0]
    func = func10
    return func
var25 = func11()
def func9(arg18, arg19):
    var20 = 0
    for var21 in xrange(10):
        var20 += -4 + arg18 | arg18
    return var20
class class5(object):
    def func4(self, arg10, arg11):
        result = arg11 & -467735700 ^ arg11
        return result
class class3(object):
    def func4(self, arg8, arg9):
        return 0
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(28):
        var5 += arg3 + var5 - var6
    return var5
def func7(arg14, arg15):
    closure = [0]
    def func8(acc, rest):
        var16 = 6 ^ (6 ^ 6)
        closure[0] += var16
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 33'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
